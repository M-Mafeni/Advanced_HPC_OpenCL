Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) C Intel(R) 64 Compiler for applications running on Intel(R) 64, Version 18.0.3.222 Build 20180410

Compiler options: -I/mnt/storage/software/languages/intel/intel-parallel_studio_xe_2018_u3/compilers_and_libraries_2018.3.222/linux/mpi/intel64/include -std=c99 -qopenmp -qopt-report=5 -Wall -Ofast -xHost -lm -lOpenCL -o d2q9-bgk -L/mnt/storage/software/languages/intel/intel-parallel_studio_xe_2018_u3/compilers_and_libraries_2018.3.222/linux/mpi/intel64/lib/release_mt -L/mnt/storage/software/languages/intel/intel-parallel_studio_xe_2018_u3/compilers_and_libraries_2018.3.222/linux/mpi/intel64/lib -Xlinker --enable-new-dtags -Xlinker -rpath -Xlinker /mnt/storage/software/languages/intel/intel-parallel_studio_xe_2018_u3/compilers_and_libraries_2018.3.222/linux/mpi/intel64/lib/release_mt -Xlinker -rpath -Xlinker /mnt/storage/software/languages/intel/intel-parallel_studio_xe_2018_u3/compilers_and_libraries_2018.3.222/linux/mpi/intel64/lib -Xlinker -rpath -Xlinker /opt/intel/mpi-rt/2017.0.0/intel64/lib/release_mt -Xlinker -rpath -Xlinker /opt/intel/mpi-rt/2017.0.0/intel64/lib -lmpifort -lmpi -lmpigi -ldl -lrt -lpthread

    Report from: Interprocedural optimizations [ipo]

  WHOLE PROGRAM (SAFE) [EITHER METHOD]: false
  WHOLE PROGRAM (SEEN) [TABLE METHOD]: false
  WHOLE PROGRAM (READ) [OBJECT READER METHOD]: false

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 230
  -inline-max-total-size: 2000
  -inline-max-per-routine: 10000
  -inline-max-per-compile: 500000

In the inlining report below:
   "sz" refers to the "size" of the routine. The smaller a routine's size,
      the more likely it is to be inlined.
   "isz" refers to the "inlined size" of the routine. This is the amount
      the calling routine will grow if the called routine is inlined into it.
      The compiler generally limits the amount a routine can grow by having
      routines inlined into it.

Begin optimization report for: main(int, char **)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (main(int, char **)) [1/13=7.7%] d2q9-bgk.c(143,1)
  -> EXTERN: (162,2) MPI_Init(int *, char ***)
  -> EXTERN: (163,2) MPI_Comm_size(MPI_Comm, int *)
  -> EXTERN: (164,2) MPI_Comm_rank(MPI_Comm, int *)
  -> INLINE: (169,5) usage(const char *) (isz = 6) (sz = 10)
    -> EXTERN: (882,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (883,3) exit(int)
  -> (179,3) initialise(const char *, const char *, t_param *, t_speed_arr **, t_speed_arr **, int **, float **) (isz = 909) (sz = 928)
     [[ Inlining would exceed -inline-max-size value (928>253) <1>]]
  -> INLINE: (181,15) calc_nrows_from_rank(int, int, int) (isz = 7) (sz = 18)
  -> EXTERN: (186,19) malloc(size_t)
  -> EXTERN: (188,3) printf(const char *__restrict__, ...)
  -> EXTERN: (189,3) MPI_Gather(const void *, int, MPI_Datatype, void *, int, MPI_Datatype, int, MPI_Comm)
  -> EXTERN: (193,28) malloc(size_t)
  -> EXTERN: (194,32) _mm_malloc(unsigned long long, unsigned long long)
  -> EXTERN: (195,32) _mm_malloc(unsigned long long, unsigned long long)
  -> EXTERN: (196,32) _mm_malloc(unsigned long long, unsigned long long)
  -> EXTERN: (197,32) _mm_malloc(unsigned long long, unsigned long long)
  -> EXTERN: (198,32) _mm_malloc(unsigned long long, unsigned long long)
  -> EXTERN: (199,33) _mm_malloc(unsigned long long, unsigned long long)
  -> EXTERN: (200,33) _mm_malloc(unsigned long long, unsigned long long)
  -> EXTERN: (201,33) _mm_malloc(unsigned long long, unsigned long long)
  -> EXTERN: (202,33) _mm_malloc(unsigned long long, unsigned long long)
  -> EXTERN: (204,32) malloc(size_t)
  -> EXTERN: (205,36) _mm_malloc(unsigned long long, unsigned long long)
  -> EXTERN: (206,36) _mm_malloc(unsigned long long, unsigned long long)
  -> EXTERN: (207,36) _mm_malloc(unsigned long long, unsigned long long)
  -> EXTERN: (208,36) _mm_malloc(unsigned long long, unsigned long long)
  -> EXTERN: (209,36) _mm_malloc(unsigned long long, unsigned long long)
  -> EXTERN: (210,37) _mm_malloc(unsigned long long, unsigned long long)
  -> EXTERN: (211,37) _mm_malloc(unsigned long long, unsigned long long)
  -> EXTERN: (212,37) _mm_malloc(unsigned long long, unsigned long long)
  -> EXTERN: (213,37) _mm_malloc(unsigned long long, unsigned long long)
  -> EXTERN: (214,24) malloc(size_t)
  -> EXTERN: (234,3) gettimeofday(struct timeval *__restrict__, __timezone_ptr_t)
  -> INLINE: (238,19) timestep(const t_param, t_speed_arr *__restrict__, t_speed_arr *__restrict__, int *__restrict__) (isz = 153) (sz = 166)
    -> INLINE: (277,3) accelerate_flow(const t_param, t_speed_arr *__restrict__, int *__restrict__) (isz = 147) (sz = 158)
    -> (279,10) propagate(const t_param, t_speed_arr *__restrict__, t_speed_arr *__restrict__, int *__restrict__) (isz = 760) (sz = 773)
       [[ Inlining would exceed -inline-max-size value (773>253) <1>]]
  -> EXTERN: (252,3) gettimeofday(struct timeval *__restrict__, __timezone_ptr_t)
  -> EXTERN: (254,3) getrusage(__rusage_who_t, struct rusage *)
  -> EXTERN: (262,7) printf(const char *__restrict__, ...)
  -> EXTERN: (263,7) printf(const char *__restrict__, ...)
  -> INLINE: (263,45) calc_reynolds(const t_param, t_speed_arr *, int *) (isz = 222) (sz = 233)
    -> INLINE: (759,10) av_velocity(const t_param, t_speed_arr *__restrict__, int *__restrict__) (isz = 212) (sz = 223)
  -> EXTERN: (264,7) printf(const char *__restrict__, ...)
  -> EXTERN: (265,7) printf(const char *__restrict__, ...)
  -> EXTERN: (266,7) printf(const char *__restrict__, ...)
  -> (268,7) write_values(const t_param, t_speed_arr *, int *, float *) (isz = 275) (sz = 288)
     [[ Inlining would exceed -inline-max-size value (288>253) <1>]]
  -> INLINE: (269,7) finalise(const t_param *, int **, float **) (isz = 6) (sz = 17)
    -> EXTERN: (745,5) free(void *)
    -> EXTERN: (748,5) free(void *)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at d2q9-bgk.c(510,3) inlined into d2q9-bgk.c(263,45)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at d2q9-bgk.c(513,5) inlined into d2q9-bgk.c(263,45)
      remark #15388: vectorization support: reference cells_arr->speeds0[index] has aligned access   [ d2q9-bgk.c(522,26) ]
      remark #15388: vectorization support: reference cells_arr->speedsN[index] has aligned access   [ d2q9-bgk.c(523,26) ]
      remark #15388: vectorization support: reference cells_arr->speedsS[index] has aligned access   [ d2q9-bgk.c(524,26) ]
      remark #15388: vectorization support: reference cells_arr->speedsW[index] has aligned access   [ d2q9-bgk.c(525,26) ]
      remark #15388: vectorization support: reference cells_arr->speedsE[index] has aligned access   [ d2q9-bgk.c(526,26) ]
      remark #15388: vectorization support: reference cells_arr->speedsNW[index] has aligned access   [ d2q9-bgk.c(527,26) ]
      remark #15388: vectorization support: reference cells_arr->speedsNE[index] has aligned access   [ d2q9-bgk.c(528,26) ]
      remark #15388: vectorization support: reference cells_arr->speedsSW[index] has aligned access   [ d2q9-bgk.c(529,26) ]
      remark #15388: vectorization support: reference cells_arr->speedsSE[index] has aligned access   [ d2q9-bgk.c(530,26) ]
      remark #15388: vectorization support: reference cells_arr->speedsE[index] has aligned access   [ d2q9-bgk.c(532,22) ]
      remark #15388: vectorization support: reference cells_arr->speedsNE[index] has aligned access   [ d2q9-bgk.c(533,25) ]
      remark #15388: vectorization support: reference cells_arr->speedsSE[index] has aligned access   [ d2q9-bgk.c(534,25) ]
      remark #15388: vectorization support: reference cells_arr->speedsW[index] has aligned access   [ d2q9-bgk.c(535,26) ]
      remark #15388: vectorization support: reference cells_arr->speedsNW[index] has aligned access   [ d2q9-bgk.c(536,28) ]
      remark #15388: vectorization support: reference cells_arr->speedsSW[index] has aligned access   [ d2q9-bgk.c(537,28) ]
      remark #15388: vectorization support: reference cells_arr->speedsN[index] has aligned access   [ d2q9-bgk.c(540,22) ]
      remark #15388: vectorization support: reference cells_arr->speedsNE[index] has aligned access   [ d2q9-bgk.c(541,25) ]
      remark #15388: vectorization support: reference cells_arr->speedsNW[index] has aligned access   [ d2q9-bgk.c(542,25) ]
      remark #15388: vectorization support: reference cells_arr->speedsS[index] has aligned access   [ d2q9-bgk.c(543,26) ]
      remark #15388: vectorization support: reference cells_arr->speedsSW[index] has aligned access   [ d2q9-bgk.c(544,28) ]
      remark #15388: vectorization support: reference cells_arr->speedsSE[index] has aligned access   [ d2q9-bgk.c(545,28) ]
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.036
      remark #15300: LOOP WAS VECTORIZED
      remark #15448: unmasked aligned unit stride loads: 22 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 105 
      remark #15477: vector cost: 21.000 
      remark #15478: estimated potential speedup: 4.740 
      remark #15486: divides: 2 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at d2q9-bgk.c(513,5) inlined into d2q9-bgk.c(263,45)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

d2q9-bgk.c(263,45):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (16, 0)
d2q9-bgk.c(268,7):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (1, 0)
d2q9-bgk.c(143,1):remark #34051: REGISTER ALLOCATION : [main] d2q9-bgk.c:143

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   30[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm15]
        
    Routine temporaries
        Total         :     427
            Global    :      97
            Local     :     330
        Regenerable   :      93
        Spilled       :      47
        
    Routine stack
        Variables     :     276 bytes*
            Reads     :      52 [3.73e+01 ~ 5.1%]
            Writes    :      16 [8.10e+00 ~ 1.1%]
        Spills        :     328 bytes*
            Reads     :      60 [4.45e+01 ~ 6.1%]
            Writes    :      46 [2.82e+01 ~ 3.9%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: propagate(const t_param, t_speed_arr *__restrict__, t_speed_arr *__restrict__, int *__restrict__)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (propagate(const t_param, t_speed_arr *__restrict__, t_speed_arr *__restrict__, int *__restrict__)) [2/13=15.4%] d2q9-bgk.c(335,1)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at d2q9-bgk.c(384,5)
   remark #25261: Invariant Condition eliminated(Proven True) at line 391
   remark #25258: Invariant Condition eliminated(Loop at level 1 peeled) at line 392 
   remark #25260: Invariant Condition eliminated(Proven False) at line 392
   remark #15388: vectorization support: reference tmp_cells->speedsE[index] has aligned access   [ d2q9-bgk.c(398,11) ]
   remark #15388: vectorization support: reference tmp_cells->speedsN[index] has aligned access   [ d2q9-bgk.c(399,11) ]
   remark #15388: vectorization support: reference cells->speedsS[ii+y_n*params.nx] has aligned access   [ d2q9-bgk.c(399,39) ]
   remark #15388: vectorization support: reference tmp_cells->speedsW[index] has aligned access   [ d2q9-bgk.c(400,11) ]
   remark #15388: vectorization support: reference cells->speedsE[x_w+jj*params.nx] has aligned access   [ d2q9-bgk.c(400,39) ]
   remark #15388: vectorization support: reference tmp_cells->speedsS[index] has aligned access   [ d2q9-bgk.c(401,11) ]
   remark #15388: vectorization support: reference cells->speedsN[ii+y_s*params.nx] has aligned access   [ d2q9-bgk.c(401,39) ]
   remark #15388: vectorization support: reference tmp_cells->speedsNE[index] has aligned access   [ d2q9-bgk.c(402,11) ]
   remark #15388: vectorization support: reference tmp_cells->speedsNW[index] has aligned access   [ d2q9-bgk.c(403,11) ]
   remark #15388: vectorization support: reference cells->speedsSE[x_w+y_n*params.nx] has aligned access   [ d2q9-bgk.c(403,40) ]
   remark #15388: vectorization support: reference tmp_cells->speedsSW[index] has aligned access   [ d2q9-bgk.c(404,11) ]
   remark #15388: vectorization support: reference cells->speedsNE[x_w+y_s*params.nx] has aligned access   [ d2q9-bgk.c(404,40) ]
   remark #15388: vectorization support: reference tmp_cells->speedsSE[index] has aligned access   [ d2q9-bgk.c(405,11) ]
   remark #15388: vectorization support: reference cells->speeds0[ii+jj*params.nx] has aligned access   [ d2q9-bgk.c(409,28) ]
   remark #15388: vectorization support: reference cells->speedsS[ii+y_n*params.nx] has aligned access   [ d2q9-bgk.c(411,28) ]
   remark #15388: vectorization support: reference cells->speedsN[ii+y_s*params.nx] has aligned access   [ d2q9-bgk.c(410,28) ]
   remark #15388: vectorization support: reference cells->speedsE[x_w+jj*params.nx] has aligned access   [ d2q9-bgk.c(413,28) ]
   remark #15388: vectorization support: reference cells->speedsNE[x_w+y_s*params.nx] has aligned access   [ d2q9-bgk.c(415,28) ]
   remark #15388: vectorization support: reference cells->speedsSE[x_w+y_n*params.nx] has aligned access   [ d2q9-bgk.c(417,28) ]
   remark #15388: vectorization support: reference cells->speedsE[x_w+jj*params.nx] has aligned access   [ d2q9-bgk.c(419,24) ]
   remark #15388: vectorization support: reference cells->speedsNE[x_w+y_s*params.nx] has aligned access   [ d2q9-bgk.c(420,27) ]
   remark #15388: vectorization support: reference cells->speedsSE[x_w+y_n*params.nx] has aligned access   [ d2q9-bgk.c(421,27) ]
   remark #15388: vectorization support: reference cells->speedsN[ii+y_s*params.nx] has aligned access   [ d2q9-bgk.c(427,24) ]
   remark #15388: vectorization support: reference cells->speedsNE[x_w+y_s*params.nx] has aligned access   [ d2q9-bgk.c(428,27) ]
   remark #15388: vectorization support: reference cells->speedsS[ii+y_n*params.nx] has aligned access   [ d2q9-bgk.c(430,28) ]
   remark #15388: vectorization support: reference cells->speedsSE[x_w+y_n*params.nx] has aligned access   [ d2q9-bgk.c(432,30) ]
   remark #15388: vectorization support: reference tmp_cells->speeds0[index] has aligned access   [ d2q9-bgk.c(468,11) ]
   remark #15388: vectorization support: reference cells->speeds0[ii+jj*params.nx] has aligned access   [ d2q9-bgk.c(468,39) ]
   remark #15388: vectorization support: reference cells->speeds0[ii+jj*params.nx] has aligned access   [ d2q9-bgk.c(468,100) ]
   remark #15388: vectorization support: reference tmp_cells->speedsE[index] has aligned access   [ d2q9-bgk.c(469,11) ]
   remark #15388: vectorization support: reference cells->speedsE[x_w+jj*params.nx] has aligned access   [ d2q9-bgk.c(469,39) ]
   remark #15388: vectorization support: reference cells->speedsE[x_w+jj*params.nx] has aligned access   [ d2q9-bgk.c(469,103) ]
   remark #15388: vectorization support: reference tmp_cells->speedsN[index] has aligned access   [ d2q9-bgk.c(470,11) ]
   remark #15388: vectorization support: reference cells->speedsN[ii+y_s*params.nx] has aligned access   [ d2q9-bgk.c(470,39) ]
   remark #15388: vectorization support: reference cells->speedsN[ii+y_s*params.nx] has aligned access   [ d2q9-bgk.c(470,103) ]
   remark #15388: vectorization support: reference tmp_cells->speedsW[index] has aligned access   [ d2q9-bgk.c(471,11) ]
   remark #15388: vectorization support: reference tmp_cells->speedsS[index] has aligned access   [ d2q9-bgk.c(472,11) ]
   remark #15388: vectorization support: reference cells->speedsS[ii+y_n*params.nx] has aligned access   [ d2q9-bgk.c(472,39) ]
   remark #15388: vectorization support: reference cells->speedsS[ii+y_n*params.nx] has aligned access   [ d2q9-bgk.c(472,103) ]
   remark #15388: vectorization support: reference tmp_cells->speedsNE[index] has aligned access   [ d2q9-bgk.c(473,11) ]
   remark #15388: vectorization support: reference cells->speedsNE[x_w+y_s*params.nx] has aligned access   [ d2q9-bgk.c(473,40) ]
   remark #15388: vectorization support: reference cells->speedsNE[x_w+y_s*params.nx] has aligned access   [ d2q9-bgk.c(473,106) ]
   remark #15388: vectorization support: reference tmp_cells->speedsNW[index] has aligned access   [ d2q9-bgk.c(474,11) ]
   remark #15388: vectorization support: reference tmp_cells->speedsSW[index] has aligned access   [ d2q9-bgk.c(475,11) ]
   remark #15388: vectorization support: reference tmp_cells->speedsSE[index] has aligned access   [ d2q9-bgk.c(476,11) ]
   remark #15388: vectorization support: reference cells->speedsSE[x_w+y_n*params.nx] has aligned access   [ d2q9-bgk.c(476,40) ]
   remark #15388: vectorization support: reference cells->speedsSE[x_w+y_n*params.nx] has aligned access   [ d2q9-bgk.c(476,106) ]
   remark #15388: vectorization support: reference tmp_cells->speedsE[index] has aligned access   [ d2q9-bgk.c(398,11) ]
   remark #15388: vectorization support: reference tmp_cells->speedsN[index] has aligned access   [ d2q9-bgk.c(399,11) ]
   remark #15388: vectorization support: reference tmp_cells->speedsW[index] has aligned access   [ d2q9-bgk.c(400,11) ]
   remark #15388: vectorization support: reference tmp_cells->speedsS[index] has aligned access   [ d2q9-bgk.c(401,11) ]
   remark #15388: vectorization support: reference tmp_cells->speedsNE[index] has aligned access   [ d2q9-bgk.c(402,11) ]
   remark #15388: vectorization support: reference tmp_cells->speedsNW[index] has aligned access   [ d2q9-bgk.c(403,11) ]
   remark #15388: vectorization support: reference tmp_cells->speedsSW[index] has aligned access   [ d2q9-bgk.c(404,11) ]
   remark #15388: vectorization support: reference tmp_cells->speedsSE[index] has aligned access   [ d2q9-bgk.c(405,11) ]
   remark #15388: vectorization support: reference tmp_cells->speedsE[index] has aligned access   [ d2q9-bgk.c(469,11) ]
   remark #15388: vectorization support: reference tmp_cells->speedsN[index] has aligned access   [ d2q9-bgk.c(470,11) ]
   remark #15388: vectorization support: reference tmp_cells->speedsW[index] has aligned access   [ d2q9-bgk.c(471,11) ]
   remark #15388: vectorization support: reference tmp_cells->speedsS[index] has aligned access   [ d2q9-bgk.c(472,11) ]
   remark #15388: vectorization support: reference tmp_cells->speedsNE[index] has aligned access   [ d2q9-bgk.c(473,11) ]
   remark #15388: vectorization support: reference tmp_cells->speedsNW[index] has aligned access   [ d2q9-bgk.c(474,11) ]
   remark #15388: vectorization support: reference tmp_cells->speedsSW[index] has aligned access   [ d2q9-bgk.c(475,11) ]
   remark #15388: vectorization support: reference tmp_cells->speedsSE[index] has aligned access   [ d2q9-bgk.c(476,11) ]
   remark #15415: vectorization support: irregularly indexed load was generated for the variable <cells->speedsW[x_e+jj*params.nx]>, part of index is nonlinearly computed   [ d2q9-bgk.c(398,39) ]
   remark #15415: vectorization support: irregularly indexed load was generated for the variable <cells->speedsSW[x_e+y_n*params.nx]>, part of index is nonlinearly computed   [ d2q9-bgk.c(402,40) ]
   remark #15415: vectorization support: irregularly indexed load was generated for the variable <cells->speedsNW[x_e+y_s*params.nx]>, part of index is nonlinearly computed   [ d2q9-bgk.c(405,40) ]
   remark #15415: vectorization support: irregularly indexed load was generated for the variable <cells->speedsW[x_e+jj*params.nx]>, part of index is nonlinearly computed   [ d2q9-bgk.c(412,28) ]
   remark #15415: vectorization support: irregularly indexed load was generated for the variable <cells->speedsSW[x_e+y_n*params.nx]>, part of index is nonlinearly computed   [ d2q9-bgk.c(416,28) ]
   remark #15415: vectorization support: irregularly indexed load was generated for the variable <cells->speedsNW[x_e+y_s*params.nx]>, part of index is nonlinearly computed   [ d2q9-bgk.c(414,28) ]
   remark #15415: vectorization support: irregularly indexed load was generated for the variable <cells->speedsW[x_e+jj*params.nx]>, part of index is nonlinearly computed   [ d2q9-bgk.c(422,28) ]
   remark #15415: vectorization support: irregularly indexed load was generated for the variable <cells->speedsSW[x_e+y_n*params.nx]>, part of index is nonlinearly computed   [ d2q9-bgk.c(424,30) ]
   remark #15415: vectorization support: irregularly indexed load was generated for the variable <cells->speedsNW[x_e+y_s*params.nx]>, part of index is nonlinearly computed   [ d2q9-bgk.c(423,30) ]
   remark #15415: vectorization support: irregularly indexed load was generated for the variable <cells->speedsNW[x_e+y_s*params.nx]>, part of index is nonlinearly computed   [ d2q9-bgk.c(429,27) ]
   remark #15415: vectorization support: irregularly indexed load was generated for the variable <cells->speedsSW[x_e+y_n*params.nx]>, part of index is nonlinearly computed   [ d2q9-bgk.c(431,30) ]
   remark #15415: vectorization support: irregularly indexed load was generated for the variable <cells->speedsW[x_e+jj*params.nx]>, part of index is nonlinearly computed   [ d2q9-bgk.c(471,39) ]
   remark #15415: vectorization support: irregularly indexed load was generated for the variable <cells->speedsW[x_e+jj*params.nx]>, part of index is nonlinearly computed   [ d2q9-bgk.c(471,103) ]
   remark #15415: vectorization support: irregularly indexed load was generated for the variable <cells->speedsNW[x_e+y_s*params.nx]>, part of index is nonlinearly computed   [ d2q9-bgk.c(474,40) ]
   remark #15415: vectorization support: irregularly indexed load was generated for the variable <cells->speedsNW[x_e+y_s*params.nx]>, part of index is nonlinearly computed   [ d2q9-bgk.c(474,106) ]
   remark #15415: vectorization support: irregularly indexed load was generated for the variable <cells->speedsSW[x_e+y_n*params.nx]>, part of index is nonlinearly computed   [ d2q9-bgk.c(475,40) ]
   remark #15415: vectorization support: irregularly indexed load was generated for the variable <cells->speedsSW[x_e+y_n*params.nx]>, part of index is nonlinearly computed   [ d2q9-bgk.c(475,106) ]
   remark #15305: vectorization support: vector length 8
   remark #15309: vectorization support: normalized vectorization overhead 0.098
   remark #15301: OpenMP SIMD LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 47 
   remark #15449: unmasked aligned unit stride stores: 16 
   remark #15455: masked aligned unit stride stores: 1 
   remark #15462: unmasked indexed (or gather) loads: 17 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 390 
   remark #15477: vector cost: 180.750 
   remark #15478: estimated potential speedup: 2.110 
   remark #15482: vectorized math library calls: 1 
   remark #15486: divides: 2 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at d2q9-bgk.c(384,5)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at d2q9-bgk.c(379,3)
   remark #25261: Invariant Condition eliminated(Proven True) at line 392
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at d2q9-bgk.c(384,5)
      remark #25258: Invariant Condition eliminated(Loop at level 1 peeled) at line 391 
      remark #25260: Invariant Condition eliminated(Proven False) at line 391
      remark #25258: Invariant Condition eliminated(Loop at level 2 peeled) at line 392 
      remark #25260: Invariant Condition eliminated(Proven False) at line 392
      remark #15388: vectorization support: reference tmp_cells->speedsE[index] has aligned access   [ d2q9-bgk.c(398,11) ]
      remark #15388: vectorization support: reference tmp_cells->speedsN[index] has aligned access   [ d2q9-bgk.c(399,11) ]
      remark #15388: vectorization support: reference cells->speedsS[ii+y_n*params.nx] has aligned access   [ d2q9-bgk.c(399,39) ]
      remark #15388: vectorization support: reference tmp_cells->speedsW[index] has aligned access   [ d2q9-bgk.c(400,11) ]
      remark #15388: vectorization support: reference cells->speedsE[x_w+jj*params.nx] has aligned access   [ d2q9-bgk.c(400,39) ]
      remark #15388: vectorization support: reference tmp_cells->speedsS[index] has aligned access   [ d2q9-bgk.c(401,11) ]
      remark #15388: vectorization support: reference cells->speedsN[ii+y_s*params.nx] has aligned access   [ d2q9-bgk.c(401,39) ]
      remark #15388: vectorization support: reference tmp_cells->speedsNE[index] has aligned access   [ d2q9-bgk.c(402,11) ]
      remark #15388: vectorization support: reference tmp_cells->speedsNW[index] has aligned access   [ d2q9-bgk.c(403,11) ]
      remark #15388: vectorization support: reference cells->speedsSE[x_w+y_n*params.nx] has aligned access   [ d2q9-bgk.c(403,40) ]
      remark #15388: vectorization support: reference tmp_cells->speedsSW[index] has aligned access   [ d2q9-bgk.c(404,11) ]
      remark #15388: vectorization support: reference cells->speedsNE[x_w+y_s*params.nx] has aligned access   [ d2q9-bgk.c(404,40) ]
      remark #15388: vectorization support: reference tmp_cells->speedsSE[index] has aligned access   [ d2q9-bgk.c(405,11) ]
      remark #15388: vectorization support: reference cells->speeds0[ii+jj*params.nx] has aligned access   [ d2q9-bgk.c(409,28) ]
      remark #15388: vectorization support: reference cells->speedsS[ii+y_n*params.nx] has aligned access   [ d2q9-bgk.c(411,28) ]
      remark #15388: vectorization support: reference cells->speedsN[ii+y_s*params.nx] has aligned access   [ d2q9-bgk.c(410,28) ]
      remark #15388: vectorization support: reference cells->speedsE[x_w+jj*params.nx] has aligned access   [ d2q9-bgk.c(413,28) ]
      remark #15388: vectorization support: reference cells->speedsNE[x_w+y_s*params.nx] has aligned access   [ d2q9-bgk.c(415,28) ]
      remark #15388: vectorization support: reference cells->speedsSE[x_w+y_n*params.nx] has aligned access   [ d2q9-bgk.c(417,28) ]
      remark #15388: vectorization support: reference cells->speedsE[x_w+jj*params.nx] has aligned access   [ d2q9-bgk.c(419,24) ]
      remark #15388: vectorization support: reference cells->speedsNE[x_w+y_s*params.nx] has aligned access   [ d2q9-bgk.c(420,27) ]
      remark #15388: vectorization support: reference cells->speedsSE[x_w+y_n*params.nx] has aligned access   [ d2q9-bgk.c(421,27) ]
      remark #15388: vectorization support: reference cells->speedsN[ii+y_s*params.nx] has aligned access   [ d2q9-bgk.c(427,24) ]
      remark #15388: vectorization support: reference cells->speedsNE[x_w+y_s*params.nx] has aligned access   [ d2q9-bgk.c(428,27) ]
      remark #15388: vectorization support: reference cells->speedsS[ii+y_n*params.nx] has aligned access   [ d2q9-bgk.c(430,28) ]
      remark #15388: vectorization support: reference cells->speedsSE[x_w+y_n*params.nx] has aligned access   [ d2q9-bgk.c(432,30) ]
      remark #15388: vectorization support: reference tmp_cells->speeds0[index] has aligned access   [ d2q9-bgk.c(468,11) ]
      remark #15388: vectorization support: reference cells->speeds0[ii+jj*params.nx] has aligned access   [ d2q9-bgk.c(468,39) ]
      remark #15388: vectorization support: reference cells->speeds0[ii+jj*params.nx] has aligned access   [ d2q9-bgk.c(468,100) ]
      remark #15388: vectorization support: reference tmp_cells->speedsE[index] has aligned access   [ d2q9-bgk.c(469,11) ]
      remark #15388: vectorization support: reference cells->speedsE[x_w+jj*params.nx] has aligned access   [ d2q9-bgk.c(469,39) ]
      remark #15388: vectorization support: reference cells->speedsE[x_w+jj*params.nx] has aligned access   [ d2q9-bgk.c(469,103) ]
      remark #15388: vectorization support: reference tmp_cells->speedsN[index] has aligned access   [ d2q9-bgk.c(470,11) ]
      remark #15388: vectorization support: reference cells->speedsN[ii+y_s*params.nx] has aligned access   [ d2q9-bgk.c(470,39) ]
      remark #15388: vectorization support: reference cells->speedsN[ii+y_s*params.nx] has aligned access   [ d2q9-bgk.c(470,103) ]
      remark #15388: vectorization support: reference tmp_cells->speedsW[index] has aligned access   [ d2q9-bgk.c(471,11) ]
      remark #15388: vectorization support: reference tmp_cells->speedsS[index] has aligned access   [ d2q9-bgk.c(472,11) ]
      remark #15388: vectorization support: reference cells->speedsS[ii+y_n*params.nx] has aligned access   [ d2q9-bgk.c(472,39) ]
      remark #15388: vectorization support: reference cells->speedsS[ii+y_n*params.nx] has aligned access   [ d2q9-bgk.c(472,103) ]
      remark #15388: vectorization support: reference tmp_cells->speedsNE[index] has aligned access   [ d2q9-bgk.c(473,11) ]
      remark #15388: vectorization support: reference cells->speedsNE[x_w+y_s*params.nx] has aligned access   [ d2q9-bgk.c(473,40) ]
      remark #15388: vectorization support: reference cells->speedsNE[x_w+y_s*params.nx] has aligned access   [ d2q9-bgk.c(473,106) ]
      remark #15388: vectorization support: reference tmp_cells->speedsNW[index] has aligned access   [ d2q9-bgk.c(474,11) ]
      remark #15388: vectorization support: reference tmp_cells->speedsSW[index] has aligned access   [ d2q9-bgk.c(475,11) ]
      remark #15388: vectorization support: reference tmp_cells->speedsSE[index] has aligned access   [ d2q9-bgk.c(476,11) ]
      remark #15388: vectorization support: reference cells->speedsSE[x_w+y_n*params.nx] has aligned access   [ d2q9-bgk.c(476,40) ]
      remark #15388: vectorization support: reference cells->speedsSE[x_w+y_n*params.nx] has aligned access   [ d2q9-bgk.c(476,106) ]
      remark #15388: vectorization support: reference tmp_cells->speedsE[index] has aligned access   [ d2q9-bgk.c(398,11) ]
      remark #15388: vectorization support: reference tmp_cells->speedsN[index] has aligned access   [ d2q9-bgk.c(399,11) ]
      remark #15388: vectorization support: reference tmp_cells->speedsW[index] has aligned access   [ d2q9-bgk.c(400,11) ]
      remark #15388: vectorization support: reference tmp_cells->speedsS[index] has aligned access   [ d2q9-bgk.c(401,11) ]
      remark #15388: vectorization support: reference tmp_cells->speedsNE[index] has aligned access   [ d2q9-bgk.c(402,11) ]
      remark #15388: vectorization support: reference tmp_cells->speedsNW[index] has aligned access   [ d2q9-bgk.c(403,11) ]
      remark #15388: vectorization support: reference tmp_cells->speedsSW[index] has aligned access   [ d2q9-bgk.c(404,11) ]
      remark #15388: vectorization support: reference tmp_cells->speedsSE[index] has aligned access   [ d2q9-bgk.c(405,11) ]
      remark #15388: vectorization support: reference tmp_cells->speedsE[index] has aligned access   [ d2q9-bgk.c(469,11) ]
      remark #15388: vectorization support: reference tmp_cells->speedsN[index] has aligned access   [ d2q9-bgk.c(470,11) ]
      remark #15388: vectorization support: reference tmp_cells->speedsW[index] has aligned access   [ d2q9-bgk.c(471,11) ]
      remark #15388: vectorization support: reference tmp_cells->speedsS[index] has aligned access   [ d2q9-bgk.c(472,11) ]
      remark #15388: vectorization support: reference tmp_cells->speedsNE[index] has aligned access   [ d2q9-bgk.c(473,11) ]
      remark #15388: vectorization support: reference tmp_cells->speedsNW[index] has aligned access   [ d2q9-bgk.c(474,11) ]
      remark #15388: vectorization support: reference tmp_cells->speedsSW[index] has aligned access   [ d2q9-bgk.c(475,11) ]
      remark #15388: vectorization support: reference tmp_cells->speedsSE[index] has aligned access   [ d2q9-bgk.c(476,11) ]
      remark #15415: vectorization support: irregularly indexed load was generated for the variable <cells->speedsW[x_e+jj*params.nx]>, part of index is nonlinearly computed   [ d2q9-bgk.c(398,39) ]
      remark #15415: vectorization support: irregularly indexed load was generated for the variable <cells->speedsSW[x_e+y_n*params.nx]>, part of index is nonlinearly computed   [ d2q9-bgk.c(402,40) ]
      remark #15415: vectorization support: irregularly indexed load was generated for the variable <cells->speedsNW[x_e+y_s*params.nx]>, part of index is nonlinearly computed   [ d2q9-bgk.c(405,40) ]
      remark #15415: vectorization support: irregularly indexed load was generated for the variable <cells->speedsW[x_e+jj*params.nx]>, part of index is nonlinearly computed   [ d2q9-bgk.c(412,28) ]
      remark #15415: vectorization support: irregularly indexed load was generated for the variable <cells->speedsSW[x_e+y_n*params.nx]>, part of index is nonlinearly computed   [ d2q9-bgk.c(416,28) ]
      remark #15415: vectorization support: irregularly indexed load was generated for the variable <cells->speedsNW[x_e+y_s*params.nx]>, part of index is nonlinearly computed   [ d2q9-bgk.c(414,28) ]
      remark #15415: vectorization support: irregularly indexed load was generated for the variable <cells->speedsW[x_e+jj*params.nx]>, part of index is nonlinearly computed   [ d2q9-bgk.c(422,28) ]
      remark #15415: vectorization support: irregularly indexed load was generated for the variable <cells->speedsSW[x_e+y_n*params.nx]>, part of index is nonlinearly computed   [ d2q9-bgk.c(424,30) ]
      remark #15415: vectorization support: irregularly indexed load was generated for the variable <cells->speedsNW[x_e+y_s*params.nx]>, part of index is nonlinearly computed   [ d2q9-bgk.c(423,30) ]
      remark #15415: vectorization support: irregularly indexed load was generated for the variable <cells->speedsNW[x_e+y_s*params.nx]>, part of index is nonlinearly computed   [ d2q9-bgk.c(429,27) ]
      remark #15415: vectorization support: irregularly indexed load was generated for the variable <cells->speedsSW[x_e+y_n*params.nx]>, part of index is nonlinearly computed   [ d2q9-bgk.c(431,30) ]
      remark #15415: vectorization support: irregularly indexed load was generated for the variable <cells->speedsW[x_e+jj*params.nx]>, part of index is nonlinearly computed   [ d2q9-bgk.c(471,39) ]
      remark #15415: vectorization support: irregularly indexed load was generated for the variable <cells->speedsW[x_e+jj*params.nx]>, part of index is nonlinearly computed   [ d2q9-bgk.c(471,103) ]
      remark #15415: vectorization support: irregularly indexed load was generated for the variable <cells->speedsNW[x_e+y_s*params.nx]>, part of index is nonlinearly computed   [ d2q9-bgk.c(474,40) ]
      remark #15415: vectorization support: irregularly indexed load was generated for the variable <cells->speedsNW[x_e+y_s*params.nx]>, part of index is nonlinearly computed   [ d2q9-bgk.c(474,106) ]
      remark #15415: vectorization support: irregularly indexed load was generated for the variable <cells->speedsSW[x_e+y_n*params.nx]>, part of index is nonlinearly computed   [ d2q9-bgk.c(475,40) ]
      remark #15415: vectorization support: irregularly indexed load was generated for the variable <cells->speedsSW[x_e+y_n*params.nx]>, part of index is nonlinearly computed   [ d2q9-bgk.c(475,106) ]
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.098
      remark #15301: OpenMP SIMD LOOP WAS VECTORIZED
      remark #15448: unmasked aligned unit stride loads: 47 
      remark #15449: unmasked aligned unit stride stores: 16 
      remark #15455: masked aligned unit stride stores: 1 
      remark #15462: unmasked indexed (or gather) loads: 17 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 390 
      remark #15477: vector cost: 180.750 
      remark #15478: estimated potential speedup: 2.110 
      remark #15482: vectorized math library calls: 1 
      remark #15486: divides: 2 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at d2q9-bgk.c(384,5)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

d2q9-bgk.c(335,1):remark #34051: REGISTER ALLOCATION : [propagate] d2q9-bgk.c:335

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   30[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm15]
        
    Routine temporaries
        Total         :    1066
            Global    :     216
            Local     :     850
        Regenerable   :      77
        Spilled       :     130
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :    1504 bytes*
            Reads     :     383 [8.32e+03 ~ 22.4%]
            Writes    :     167 [2.30e+03 ~ 6.2%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: write_values(const t_param, t_speed_arr *, int *, float *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (write_values(const t_param, t_speed_arr *, int *, float *)) [3/13=23.1%] d2q9-bgk.c(786,91)
  -> EXTERN: (795,10) fopen(const char *__restrict__, const char *__restrict__)
  -> INLINE: (799,7) die(const char *, const int, const char *) (isz = 14) (sz = 22)
    -> EXTERN: (874,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (875,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (876,3) fflush(FILE *)
    -> EXTERN: (877,3) exit(int)
  -> EXTERN: (850,9) fprintf(FILE *__restrict__, const char *__restrict__, ...)
  -> EXTERN: (854,5) fclose(FILE *)
  -> EXTERN: (856,10) fopen(const char *__restrict__, const char *__restrict__)
  -> INLINE: (860,7) die(const char *, const int, const char *) (isz = 14) (sz = 22)
    -> EXTERN: (874,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (875,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (876,3) fflush(FILE *)
    -> EXTERN: (877,3) exit(int)
  -> EXTERN: (865,7) fprintf(FILE *__restrict__, const char *__restrict__, ...)
  -> EXTERN: (868,5) fclose(FILE *)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at d2q9-bgk.c(802,5)
   remark #15382: vectorization support: call to function fprintf(FILE *__restrict__, const char *__restrict__, ...) cannot be vectorized   [ d2q9-bgk.c(850,9) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between cells->speedsN (826:11) and call:fprintf(FILE *__restrict__, const char *__restrict__, ...) (850:9)
   remark #15346: vector dependence: assumed FLOW dependence between call:fprintf(FILE *__restrict__, const char *__restrict__, ...) (850:9) and cells->speedsN (826:11)

   LOOP BEGIN at d2q9-bgk.c(804,7)
      remark #15382: vectorization support: call to function fprintf(FILE *__restrict__, const char *__restrict__, ...) cannot be vectorized   [ d2q9-bgk.c(850,9) ]
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed ANTI dependence between cells->speedsN (826:11) and call:fprintf(FILE *__restrict__, const char *__restrict__, ...) (850:9)
      remark #15346: vector dependence: assumed FLOW dependence between call:fprintf(FILE *__restrict__, const char *__restrict__, ...) (850:9) and cells->speedsN (826:11)
   LOOP END
LOOP END

LOOP BEGIN at d2q9-bgk.c(863,5)
   remark #15527: loop was not vectorized: function call to fprintf(FILE *__restrict__, const char *__restrict__, ...) cannot be vectorized   [ d2q9-bgk.c(865,7) ]
LOOP END

    Report from: Code generation optimizations [cg]

d2q9-bgk.c(786,91):remark #34051: REGISTER ALLOCATION : [write_values] d2q9-bgk.c:786

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   31[ rax rdx rcx rbx rbp rsi rdi r8-r15 zmm0-zmm15]
        
    Routine temporaries
        Total         :     149
            Global    :      38
            Local     :     111
        Regenerable   :      48
        Spilled       :      14
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      72 bytes*
            Reads     :      12 [1.21e+02 ~ 8.8%]
            Writes    :       9 [2.61e+01 ~ 1.9%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: timestep(const t_param, t_speed_arr *__restrict__, t_speed_arr *__restrict__, int *__restrict__)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (timestep(const t_param, t_speed_arr *__restrict__, t_speed_arr *__restrict__, int *__restrict__)) [4/13=30.8%] d2q9-bgk.c(275,1)
  -> INLINE: (277,3) accelerate_flow(const t_param, t_speed_arr *__restrict__, int *__restrict__) (isz = 147) (sz = 158)
  -> (279,10) propagate(const t_param, t_speed_arr *__restrict__, t_speed_arr *__restrict__, int *__restrict__) (isz = 760) (sz = 773)
     [[ Inlining would exceed -inline-max-size value (773>230) <1>]]


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at d2q9-bgk.c(306,3) inlined into d2q9-bgk.c(277,3)
   remark #15388: vectorization support: reference cells_arr->speedsW[index] has aligned access   [ d2q9-bgk.c(312,15) ]
   remark #15388: vectorization support: reference cells_arr->speedsNW[index] has aligned access   [ d2q9-bgk.c(313,15) ]
   remark #15388: vectorization support: reference cells_arr->speedsSW[index] has aligned access   [ d2q9-bgk.c(314,15) ]
   remark #15388: vectorization support: reference cells_arr->speedsE[index] has aligned access   [ d2q9-bgk.c(321,7) ]
   remark #15388: vectorization support: reference cells_arr->speedsE[index] has aligned access   [ d2q9-bgk.c(321,7) ]
   remark #15388: vectorization support: reference cells_arr->speedsNE[index] has aligned access   [ d2q9-bgk.c(322,7) ]
   remark #15388: vectorization support: reference cells_arr->speedsNE[index] has aligned access   [ d2q9-bgk.c(322,7) ]
   remark #15388: vectorization support: reference cells_arr->speedsSE[index] has aligned access   [ d2q9-bgk.c(323,7) ]
   remark #15388: vectorization support: reference cells_arr->speedsSE[index] has aligned access   [ d2q9-bgk.c(323,7) ]
   remark #15388: vectorization support: reference cells_arr->speedsW[index] has aligned access   [ d2q9-bgk.c(325,7) ]
   remark #15388: vectorization support: reference cells_arr->speedsNW[index] has aligned access   [ d2q9-bgk.c(326,7) ]
   remark #15388: vectorization support: reference cells_arr->speedsSW[index] has aligned access   [ d2q9-bgk.c(327,7) ]
   remark #15388: vectorization support: reference cells_arr->speedsW[index] has aligned access   [ d2q9-bgk.c(325,7) ]
   remark #15388: vectorization support: reference cells_arr->speedsNW[index] has aligned access   [ d2q9-bgk.c(326,7) ]
   remark #15388: vectorization support: reference cells_arr->speedsSW[index] has aligned access   [ d2q9-bgk.c(327,7) ]
   remark #15305: vectorization support: vector length 8
   remark #15309: vectorization support: normalized vectorization overhead 0.143
   remark #15301: OpenMP SIMD LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 10 
   remark #15449: unmasked aligned unit stride stores: 3 
   remark #15455: masked aligned unit stride stores: 3 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 31 
   remark #15477: vector cost: 10.500 
   remark #15478: estimated potential speedup: 2.860 
   remark #15488: --- end vector cost summary ---
LOOP END

    Report from: Code generation optimizations [cg]

d2q9-bgk.c(279,10):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (8, 0), and destination (alignment, offset): (1, 0)
d2q9-bgk.c(275,1):remark #34051: REGISTER ALLOCATION : [timestep] d2q9-bgk.c:275

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   28[ rax rdx rcx rbx rsi rdi r8-r11 r13-r15 zmm0-zmm14]
        
    Routine temporaries
        Total         :      91
            Global    :      38
            Local     :      53
        Regenerable   :      10
        Spilled       :       4
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: accelerate_flow(const t_param, t_speed_arr *__restrict__, int *__restrict__)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (accelerate_flow(const t_param, t_speed_arr *__restrict__, int *__restrict__)) [5/13=38.5%] d2q9-bgk.c(283,1)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at d2q9-bgk.c(306,3)
   remark #15388: vectorization support: reference cells->speedsW[index] has aligned access   [ d2q9-bgk.c(312,15) ]
   remark #15388: vectorization support: reference cells->speedsNW[index] has aligned access   [ d2q9-bgk.c(313,15) ]
   remark #15388: vectorization support: reference cells->speedsSW[index] has aligned access   [ d2q9-bgk.c(314,15) ]
   remark #15388: vectorization support: reference cells->speedsE[index] has aligned access   [ d2q9-bgk.c(321,7) ]
   remark #15388: vectorization support: reference cells->speedsE[index] has aligned access   [ d2q9-bgk.c(321,7) ]
   remark #15388: vectorization support: reference cells->speedsNE[index] has aligned access   [ d2q9-bgk.c(322,7) ]
   remark #15388: vectorization support: reference cells->speedsNE[index] has aligned access   [ d2q9-bgk.c(322,7) ]
   remark #15388: vectorization support: reference cells->speedsSE[index] has aligned access   [ d2q9-bgk.c(323,7) ]
   remark #15388: vectorization support: reference cells->speedsSE[index] has aligned access   [ d2q9-bgk.c(323,7) ]
   remark #15388: vectorization support: reference cells->speedsW[index] has aligned access   [ d2q9-bgk.c(325,7) ]
   remark #15388: vectorization support: reference cells->speedsNW[index] has aligned access   [ d2q9-bgk.c(326,7) ]
   remark #15388: vectorization support: reference cells->speedsSW[index] has aligned access   [ d2q9-bgk.c(327,7) ]
   remark #15388: vectorization support: reference cells->speedsW[index] has aligned access   [ d2q9-bgk.c(325,7) ]
   remark #15388: vectorization support: reference cells->speedsNW[index] has aligned access   [ d2q9-bgk.c(326,7) ]
   remark #15388: vectorization support: reference cells->speedsSW[index] has aligned access   [ d2q9-bgk.c(327,7) ]
   remark #15305: vectorization support: vector length 8
   remark #15309: vectorization support: normalized vectorization overhead 0.143
   remark #15301: OpenMP SIMD LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 10 
   remark #15449: unmasked aligned unit stride stores: 3 
   remark #15455: masked aligned unit stride stores: 3 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 31 
   remark #15477: vector cost: 10.500 
   remark #15478: estimated potential speedup: 2.860 
   remark #15488: --- end vector cost summary ---
LOOP END

    Report from: Code generation optimizations [cg]

d2q9-bgk.c(283,1):remark #34051: REGISTER ALLOCATION : [accelerate_flow] d2q9-bgk.c:283

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   26[ rax rdx rcx rsi rdi r8-r13 zmm0-zmm14]
        
    Routine temporaries
        Total         :      80
            Global    :      34
            Local     :      46
        Regenerable   :       8
        Spilled       :       2
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       8 bytes*
            Reads     :       1 [9.00e-01 ~ 0.3%]
            Writes    :       1 [9.00e-01 ~ 0.3%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: av_velocity(const t_param, t_speed_arr *__restrict__, int *__restrict__)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (av_velocity(const t_param, t_speed_arr *__restrict__, int *__restrict__)) [6/13=46.2%] d2q9-bgk.c(491,1)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at d2q9-bgk.c(510,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at d2q9-bgk.c(513,5)
      remark #15388: vectorization support: reference cells->speeds0[index] has aligned access   [ d2q9-bgk.c(522,26) ]
      remark #15388: vectorization support: reference cells->speedsN[index] has aligned access   [ d2q9-bgk.c(523,26) ]
      remark #15388: vectorization support: reference cells->speedsS[index] has aligned access   [ d2q9-bgk.c(524,26) ]
      remark #15388: vectorization support: reference cells->speedsW[index] has aligned access   [ d2q9-bgk.c(525,26) ]
      remark #15388: vectorization support: reference cells->speedsE[index] has aligned access   [ d2q9-bgk.c(526,26) ]
      remark #15388: vectorization support: reference cells->speedsNW[index] has aligned access   [ d2q9-bgk.c(527,26) ]
      remark #15388: vectorization support: reference cells->speedsNE[index] has aligned access   [ d2q9-bgk.c(528,26) ]
      remark #15388: vectorization support: reference cells->speedsSW[index] has aligned access   [ d2q9-bgk.c(529,26) ]
      remark #15388: vectorization support: reference cells->speedsSE[index] has aligned access   [ d2q9-bgk.c(530,26) ]
      remark #15388: vectorization support: reference cells->speedsE[index] has aligned access   [ d2q9-bgk.c(532,22) ]
      remark #15388: vectorization support: reference cells->speedsNE[index] has aligned access   [ d2q9-bgk.c(533,25) ]
      remark #15388: vectorization support: reference cells->speedsSE[index] has aligned access   [ d2q9-bgk.c(534,25) ]
      remark #15388: vectorization support: reference cells->speedsW[index] has aligned access   [ d2q9-bgk.c(535,26) ]
      remark #15388: vectorization support: reference cells->speedsNW[index] has aligned access   [ d2q9-bgk.c(536,28) ]
      remark #15388: vectorization support: reference cells->speedsSW[index] has aligned access   [ d2q9-bgk.c(537,28) ]
      remark #15388: vectorization support: reference cells->speedsN[index] has aligned access   [ d2q9-bgk.c(540,22) ]
      remark #15388: vectorization support: reference cells->speedsNE[index] has aligned access   [ d2q9-bgk.c(541,25) ]
      remark #15388: vectorization support: reference cells->speedsNW[index] has aligned access   [ d2q9-bgk.c(542,25) ]
      remark #15388: vectorization support: reference cells->speedsS[index] has aligned access   [ d2q9-bgk.c(543,26) ]
      remark #15388: vectorization support: reference cells->speedsSW[index] has aligned access   [ d2q9-bgk.c(544,28) ]
      remark #15388: vectorization support: reference cells->speedsSE[index] has aligned access   [ d2q9-bgk.c(545,28) ]
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.036
      remark #15300: LOOP WAS VECTORIZED
      remark #15448: unmasked aligned unit stride loads: 22 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 105 
      remark #15477: vector cost: 21.000 
      remark #15478: estimated potential speedup: 4.740 
      remark #15486: divides: 2 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at d2q9-bgk.c(513,5)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

d2q9-bgk.c(491,1):remark #34051: REGISTER ALLOCATION : [av_velocity] d2q9-bgk.c:491

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   30[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm15]
        
    Routine temporaries
        Total         :     189
            Global    :      80
            Local     :     109
        Regenerable   :       9
        Spilled       :      38
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :     256 bytes*
            Reads     :      45 [1.66e+02 ~ 7.0%]
            Writes    :      34 [1.10e+02 ~ 4.6%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: finalise(const t_param *, int **, float **)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (finalise(const t_param *, int **, float **)) [7/13=53.8%] d2q9-bgk.c(740,1)
  -> EXTERN: (745,5) free(void *)
  -> EXTERN: (748,5) free(void *)


    Report from: Code generation optimizations [cg]

d2q9-bgk.c(740,1):remark #34051: REGISTER ALLOCATION : [finalise] d2q9-bgk.c:740

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    6[ rax rdx rsi rdi r12-r13]
        
    Routine temporaries
        Total         :      16
            Global    :       8
            Local     :       8
        Regenerable   :       1
        Spilled       :       2
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: calc_reynolds(const t_param, t_speed_arr *, int *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (calc_reynolds(const t_param, t_speed_arr *, int *)) [8/13=61.5%] d2q9-bgk.c(756,1)
  -> INLINE: (759,10) av_velocity(const t_param, t_speed_arr *__restrict__, int *__restrict__) (isz = 212) (sz = 223)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at d2q9-bgk.c(510,3) inlined into d2q9-bgk.c(759,10)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at d2q9-bgk.c(513,5) inlined into d2q9-bgk.c(759,10)
      remark #15388: vectorization support: reference cells->speeds0[index] has aligned access   [ d2q9-bgk.c(522,26) ]
      remark #15388: vectorization support: reference cells->speedsN[index] has aligned access   [ d2q9-bgk.c(523,26) ]
      remark #15388: vectorization support: reference cells->speedsS[index] has aligned access   [ d2q9-bgk.c(524,26) ]
      remark #15388: vectorization support: reference cells->speedsW[index] has aligned access   [ d2q9-bgk.c(525,26) ]
      remark #15388: vectorization support: reference cells->speedsE[index] has aligned access   [ d2q9-bgk.c(526,26) ]
      remark #15388: vectorization support: reference cells->speedsNW[index] has aligned access   [ d2q9-bgk.c(527,26) ]
      remark #15388: vectorization support: reference cells->speedsNE[index] has aligned access   [ d2q9-bgk.c(528,26) ]
      remark #15388: vectorization support: reference cells->speedsSW[index] has aligned access   [ d2q9-bgk.c(529,26) ]
      remark #15388: vectorization support: reference cells->speedsSE[index] has aligned access   [ d2q9-bgk.c(530,26) ]
      remark #15388: vectorization support: reference cells->speedsE[index] has aligned access   [ d2q9-bgk.c(532,22) ]
      remark #15388: vectorization support: reference cells->speedsNE[index] has aligned access   [ d2q9-bgk.c(533,25) ]
      remark #15388: vectorization support: reference cells->speedsSE[index] has aligned access   [ d2q9-bgk.c(534,25) ]
      remark #15388: vectorization support: reference cells->speedsW[index] has aligned access   [ d2q9-bgk.c(535,26) ]
      remark #15388: vectorization support: reference cells->speedsNW[index] has aligned access   [ d2q9-bgk.c(536,28) ]
      remark #15388: vectorization support: reference cells->speedsSW[index] has aligned access   [ d2q9-bgk.c(537,28) ]
      remark #15388: vectorization support: reference cells->speedsN[index] has aligned access   [ d2q9-bgk.c(540,22) ]
      remark #15388: vectorization support: reference cells->speedsNE[index] has aligned access   [ d2q9-bgk.c(541,25) ]
      remark #15388: vectorization support: reference cells->speedsNW[index] has aligned access   [ d2q9-bgk.c(542,25) ]
      remark #15388: vectorization support: reference cells->speedsS[index] has aligned access   [ d2q9-bgk.c(543,26) ]
      remark #15388: vectorization support: reference cells->speedsSW[index] has aligned access   [ d2q9-bgk.c(544,28) ]
      remark #15388: vectorization support: reference cells->speedsSE[index] has aligned access   [ d2q9-bgk.c(545,28) ]
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.036
      remark #15300: LOOP WAS VECTORIZED
      remark #15448: unmasked aligned unit stride loads: 22 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 105 
      remark #15477: vector cost: 21.000 
      remark #15478: estimated potential speedup: 4.740 
      remark #15486: divides: 2 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at d2q9-bgk.c(513,5) inlined into d2q9-bgk.c(759,10)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

d2q9-bgk.c(756,1):remark #34051: REGISTER ALLOCATION : [calc_reynolds] d2q9-bgk.c:756

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   30[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm15]
        
    Routine temporaries
        Total         :     195
            Global    :      81
            Local     :     114
        Regenerable   :      10
        Spilled       :      38
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :     256 bytes*
            Reads     :      45 [1.66e+02 ~ 7.1%]
            Writes    :      34 [1.10e+02 ~ 4.7%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: total_density(const t_param, t_speed_arr *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (total_density(const t_param, t_speed_arr *)) [9/13=69.2%] d2q9-bgk.c(763,1)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at d2q9-bgk.c(766,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at d2q9-bgk.c(768,5)
   <Peeled loop for vectorization>
      remark #25015: Estimate of max trip count of loop=7
   LOOP END

   LOOP BEGIN at d2q9-bgk.c(768,5)
      remark #15389: vectorization support: reference cells->speeds0[index] has unaligned access   [ d2q9-bgk.c(771,16) ]
      remark #15389: vectorization support: reference cells->speedsN[index] has unaligned access   [ d2q9-bgk.c(772,16) ]
      remark #15389: vectorization support: reference cells->speedsS[index] has unaligned access   [ d2q9-bgk.c(773,16) ]
      remark #15389: vectorization support: reference cells->speedsW[index] has unaligned access   [ d2q9-bgk.c(774,16) ]
      remark #15389: vectorization support: reference cells->speedsE[index] has unaligned access   [ d2q9-bgk.c(775,16) ]
      remark #15389: vectorization support: reference cells->speedsNW[index] has unaligned access   [ d2q9-bgk.c(776,16) ]
      remark #15389: vectorization support: reference cells->speedsNE[index] has unaligned access   [ d2q9-bgk.c(777,16) ]
      remark #15389: vectorization support: reference cells->speedsSW[index] has unaligned access   [ d2q9-bgk.c(778,16) ]
      remark #15389: vectorization support: reference cells->speedsSE[index] has unaligned access   [ d2q9-bgk.c(779,16) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 1.017
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15450: unmasked unaligned unit stride loads: 9 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 29 
      remark #15477: vector cost: 3.620 
      remark #15478: estimated potential speedup: 5.990 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at d2q9-bgk.c(768,5)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference cells->speeds0[index] has unaligned access   [ d2q9-bgk.c(771,16) ]
      remark #15389: vectorization support: reference cells->speedsN[index] has unaligned access   [ d2q9-bgk.c(772,16) ]
      remark #15389: vectorization support: reference cells->speedsS[index] has unaligned access   [ d2q9-bgk.c(773,16) ]
      remark #15389: vectorization support: reference cells->speedsW[index] has unaligned access   [ d2q9-bgk.c(774,16) ]
      remark #15389: vectorization support: reference cells->speedsE[index] has unaligned access   [ d2q9-bgk.c(775,16) ]
      remark #15389: vectorization support: reference cells->speedsNW[index] has unaligned access   [ d2q9-bgk.c(776,16) ]
      remark #15389: vectorization support: reference cells->speedsNE[index] has unaligned access   [ d2q9-bgk.c(777,16) ]
      remark #15389: vectorization support: reference cells->speedsSW[index] has unaligned access   [ d2q9-bgk.c(778,16) ]
      remark #15389: vectorization support: reference cells->speedsSE[index] has unaligned access   [ d2q9-bgk.c(779,16) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 2.067
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at d2q9-bgk.c(768,5)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

d2q9-bgk.c(763,1):remark #34051: REGISTER ALLOCATION : [total_density] d2q9-bgk.c:763

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   30[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm15]
        
    Routine temporaries
        Total         :     174
            Global    :      63
            Local     :     111
        Regenerable   :       6
        Spilled       :      38
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :     304 bytes*
            Reads     :      66 [2.76e+02 ~ 9.1%]
            Writes    :      67 [2.34e+02 ~ 7.7%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: die(const char *, const int, const char *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (die(const char *, const int, const char *)) [10/13=76.9%] d2q9-bgk.c(873,1)
  -> EXTERN: (874,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
  -> EXTERN: (875,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
  -> EXTERN: (876,3) fflush(FILE *)
  -> EXTERN: (877,3) exit(int)


    Report from: Code generation optimizations [cg]

d2q9-bgk.c(873,1):remark #34051: REGISTER ALLOCATION : [die] d2q9-bgk.c:873

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    6[ rax rdx rcx rbx rsi rdi]
        
    Routine temporaries
        Total         :      28
            Global    :       1
            Local     :      27
        Regenerable   :       7
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: usage(const char *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (usage(const char *)) [11/13=84.6%] d2q9-bgk.c(881,1)
  -> EXTERN: (882,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
  -> EXTERN: (883,3) exit(int)


    Report from: Code generation optimizations [cg]

d2q9-bgk.c(881,1):remark #34051: REGISTER ALLOCATION : [usage] d2q9-bgk.c:881

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    4[ rax rdx rsi rdi]
        
    Routine temporaries
        Total         :      15
            Global    :       0
            Local     :      15
        Regenerable   :       4
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: calc_nrows_from_rank(int, int, int)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (calc_nrows_from_rank(int, int, int)) [12/13=92.3%] d2q9-bgk.c(887,1)


    Report from: Code generation optimizations [cg]

d2q9-bgk.c(887,1):remark #34051: REGISTER ALLOCATION : [calc_nrows_from_rank] d2q9-bgk.c:887

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    4[ rax rdx rsi rdi]
        
    Routine temporaries
        Total         :      21
            Global    :      10
            Local     :      11
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: initialise(const char *, const char *, t_param *, t_speed_arr **, t_speed_arr **, int **, float **)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (initialise(const char *, const char *, t_param *, t_speed_arr **, t_speed_arr **, int **, float **)) [13/13=100.0%] d2q9-bgk.c(561,46)
  -> EXTERN: (569,14) fopen(const char *__restrict__, const char *__restrict__)
  -> EXTERN: (573,11) sprintf(char *__restrict__, const char *__restrict__, ...)
  -> INLINE: (574,11) die(const char *, const int, const char *) (isz = 14) (sz = 22)
    -> EXTERN: (874,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (875,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (876,3) fflush(FILE *)
    -> EXTERN: (877,3) exit(int)
  -> EXTERN: (578,18) fscanf(FILE *__restrict__, const char *__restrict__, ...)
  -> INLINE: (580,26) die(const char *, const int, const char *) (isz = 14) (sz = 22)
    -> EXTERN: (874,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (875,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (876,3) fflush(FILE *)
    -> EXTERN: (877,3) exit(int)
  -> EXTERN: (582,18) fscanf(FILE *__restrict__, const char *__restrict__, ...)
  -> INLINE: (584,26) die(const char *, const int, const char *) (isz = 14) (sz = 22)
    -> EXTERN: (874,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (875,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (876,3) fflush(FILE *)
    -> EXTERN: (877,3) exit(int)
  -> EXTERN: (586,18) fscanf(FILE *__restrict__, const char *__restrict__, ...)
  -> INLINE: (588,26) die(const char *, const int, const char *) (isz = 14) (sz = 22)
    -> EXTERN: (874,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (875,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (876,3) fflush(FILE *)
    -> EXTERN: (877,3) exit(int)
  -> EXTERN: (590,18) fscanf(FILE *__restrict__, const char *__restrict__, ...)
  -> INLINE: (592,26) die(const char *, const int, const char *) (isz = 14) (sz = 22)
    -> EXTERN: (874,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (875,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (876,3) fflush(FILE *)
    -> EXTERN: (877,3) exit(int)
  -> EXTERN: (594,18) fscanf(FILE *__restrict__, const char *__restrict__, ...)
  -> INLINE: (596,26) die(const char *, const int, const char *) (isz = 14) (sz = 22)
    -> EXTERN: (874,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (875,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (876,3) fflush(FILE *)
    -> EXTERN: (877,3) exit(int)
  -> EXTERN: (598,18) fscanf(FILE *__restrict__, const char *__restrict__, ...)
  -> INLINE: (600,26) die(const char *, const int, const char *) (isz = 14) (sz = 22)
    -> EXTERN: (874,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (875,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (876,3) fflush(FILE *)
    -> EXTERN: (877,3) exit(int)
  -> EXTERN: (602,18) fscanf(FILE *__restrict__, const char *__restrict__, ...)
  -> INLINE: (604,26) die(const char *, const int, const char *) (isz = 14) (sz = 22)
    -> EXTERN: (874,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (875,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (876,3) fflush(FILE *)
    -> EXTERN: (877,3) exit(int)
  -> EXTERN: (607,9) fclose(FILE *)
  -> EXTERN: (629,36) _mm_malloc(unsigned long long, unsigned long long)
  -> INLINE: (630,33) die(const char *, const int, const char *) (isz = 14) (sz = 22)
    -> EXTERN: (874,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (875,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (876,3) fflush(FILE *)
    -> EXTERN: (877,3) exit(int)
  -> EXTERN: (631,41) _mm_malloc(unsigned long long, unsigned long long)
  -> EXTERN: (632,41) _mm_malloc(unsigned long long, unsigned long long)
  -> EXTERN: (633,41) _mm_malloc(unsigned long long, unsigned long long)
  -> EXTERN: (634,41) _mm_malloc(unsigned long long, unsigned long long)
  -> EXTERN: (635,41) _mm_malloc(unsigned long long, unsigned long long)
  -> EXTERN: (636,42) _mm_malloc(unsigned long long, unsigned long long)
  -> EXTERN: (637,42) _mm_malloc(unsigned long long, unsigned long long)
  -> EXTERN: (638,42) _mm_malloc(unsigned long long, unsigned long long)
  -> EXTERN: (639,42) _mm_malloc(unsigned long long, unsigned long long)
  -> EXTERN: (644,40) _mm_malloc(unsigned long long, unsigned long long)
  -> INLINE: (645,37) die(const char *, const int, const char *) (isz = 14) (sz = 22)
    -> EXTERN: (874,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (875,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (876,3) fflush(FILE *)
    -> EXTERN: (877,3) exit(int)
  -> EXTERN: (646,45) _mm_malloc(unsigned long long, unsigned long long)
  -> EXTERN: (647,45) _mm_malloc(unsigned long long, unsigned long long)
  -> EXTERN: (648,45) _mm_malloc(unsigned long long, unsigned long long)
  -> EXTERN: (649,45) _mm_malloc(unsigned long long, unsigned long long)
  -> EXTERN: (650,45) _mm_malloc(unsigned long long, unsigned long long)
  -> EXTERN: (651,46) _mm_malloc(unsigned long long, unsigned long long)
  -> EXTERN: (652,46) _mm_malloc(unsigned long long, unsigned long long)
  -> EXTERN: (653,46) _mm_malloc(unsigned long long, unsigned long long)
  -> EXTERN: (654,46) _mm_malloc(unsigned long long, unsigned long long)
  -> EXTERN: (658,26) malloc(size_t)
  -> INLINE: (660,37) die(const char *, const int, const char *) (isz = 14) (sz = 22)
    -> EXTERN: (874,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (875,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (876,3) fflush(FILE *)
    -> EXTERN: (877,3) exit(int)
  -> EXTERN: (701,14) fopen(const char *__restrict__, const char *__restrict__)
  -> EXTERN: (705,11) sprintf(char *__restrict__, const char *__restrict__, ...)
  -> INLINE: (706,11) die(const char *, const int, const char *) (isz = 14) (sz = 22)
    -> EXTERN: (874,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (875,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (876,3) fflush(FILE *)
    -> EXTERN: (877,3) exit(int)
  -> EXTERN: (710,26) fscanf(FILE *__restrict__, const char *__restrict__, ...)
  -> EXTERN: (710,26) fscanf(FILE *__restrict__, const char *__restrict__, ...)
  -> INLINE: (713,28) die(const char *, const int, const char *) (isz = 14) (sz = 22)
    -> EXTERN: (874,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (875,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (876,3) fflush(FILE *)
    -> EXTERN: (877,3) exit(int)
  -> INLINE: (715,46) die(const char *, const int, const char *) (isz = 14) (sz = 22)
    -> EXTERN: (874,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (875,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (876,3) fflush(FILE *)
    -> EXTERN: (877,3) exit(int)
  -> INLINE: (717,46) die(const char *, const int, const char *) (isz = 14) (sz = 22)
    -> EXTERN: (874,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (875,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (876,3) fflush(FILE *)
    -> EXTERN: (877,3) exit(int)
  -> INLINE: (719,29) die(const char *, const int, const char *) (isz = 14) (sz = 22)
    -> EXTERN: (874,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (875,3) fprintf(FILE *__restrict__, const char *__restrict__, ...)
    -> EXTERN: (876,3) fflush(FILE *)
    -> EXTERN: (877,3) exit(int)
  -> EXTERN: (726,9) fclose(FILE *)
  -> EXTERN: (732,32) malloc(size_t)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at d2q9-bgk.c(669,12)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between *cells_ptr->speeds0 (674:18) and *cells_ptr->speedsSE[ii+jj*params->nx] (684:18)
   remark #15346: vector dependence: assumed FLOW dependence between *cells_ptr->speedsSE[ii+jj*params->nx] (684:18) and *cells_ptr->speeds0 (674:18)

   LOOP BEGIN at d2q9-bgk.c(671,14)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed ANTI dependence between *cells_ptr->speeds0 (674:18) and *cells_ptr->speedsSE[ii+jj*params->nx] (684:18)
      remark #15346: vector dependence: assumed FLOW dependence between *cells_ptr->speedsSE[ii+jj*params->nx] (684:18) and *cells_ptr->speeds0 (674:18)
   LOOP END
LOOP END

LOOP BEGIN at d2q9-bgk.c(690,12)
   remark #15523: loop was not vectorized: loop control variable jj was found, but loop iteration count cannot be computed before executing the loop

   LOOP BEGIN at d2q9-bgk.c(692,14)
      remark #15523: loop was not vectorized: loop control variable ii was found, but loop iteration count cannot be computed before executing the loop
      remark #25478: While Loop Unrolled by 8  
   LOOP END
LOOP END

LOOP BEGIN at d2q9-bgk.c(710,9)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

    Report from: Code generation optimizations [cg]

d2q9-bgk.c(561,46):remark #34051: REGISTER ALLOCATION : [initialise] d2q9-bgk.c:561

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   18[ rax rdx rcx rbx rbp rsi rdi r8-r15 zmm0-zmm2]
        
    Routine temporaries
        Total         :     633
            Global    :     106
            Local     :     527
        Regenerable   :     259
        Spilled       :       7
        
    Routine stack
        Variables     :    1036 bytes*
            Reads     :       3 [1.63e+01 ~ 1.1%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       8 bytes*
            Reads     :       1 [3.70e-02 ~ 0.0%]
            Writes    :       1 [1.00e+00 ~ 0.1%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

    Report from: Interprocedural optimizations [ipo]

INLINING FOOTNOTES:

<1> The function is larger than the inliner would normally inline.  Use the
    option -inline-max-size to increase the size of any function that would
    normally be inlined, add "inline __attribute__((always_inline))" to the
    declaration of the called function, or add "#pragma forceinline" before
    the call site.

